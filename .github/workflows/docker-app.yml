name: Build and Push Events API Application

on:
    push:
        branches: [main, develop]
        paths-ignore: ["docker-postgres/**", "*.md"]
    pull_request:
        branches: [main]
        paths-ignore: ["docker-postgres/**", "*.md"]
    workflow_dispatch:

env:
    REGISTRY: docker.io
    IMAGE_NAME: andriyko1983/events-api

jobs:
    build-and-push:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64,linux/arm64

            - name: Test application
              if: github.event_name == 'pull_request'
              run: |
                  # Start PostgreSQL for testing
                  docker run --rm -d --name test-db \
                    -e POSTGRES_PASSWORD=test_password \
                    -e POSTGRES_USER=user \
                    -e POSTGRES_DB=event_db \
                    -p 5432:5432 \
                    postgres:16-alpine

                  # Wait for PostgreSQL to start
                  sleep 30

                  # Start the application
                  docker run --rm -d --name test-app \
                    -e DATABASE_URL=postgresql://user:test_password@host.docker.internal:5432/event_db \
                    -e NEXTAUTH_SECRET=test_secret \
                    -e NEXTAUTH_URL=http://localhost:3000 \
                    -p 3000:3000 \
                    --add-host=host.docker.internal:host-gateway \
                    ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

                  # Wait for app to start
                  sleep 60

                  # Test health endpoint (if available)
                  curl -f http://localhost:3000/api/health || echo "Health check endpoint not available"

                  # Clean up
                  docker stop test-app test-db

    security-scan:
        runs-on: ubuntu-latest
        needs: build-and-push
        if: github.event_name != 'pull_request'

        steps:
            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
                  format: "sarif"
                  output: "trivy-results-app.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: "trivy-results-app.sarif"
